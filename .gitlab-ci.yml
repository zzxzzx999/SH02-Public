stages:
  - lint
  - build
  - test
  # - docker
  # - security
  - deploy

variables:
  # Define the project directory
  BACKEND_DIR: "$CI_PROJECT_DIR/gap_project"
  FRONTEND_DIR: "$BACKEND_DIR/frontend"
  REPORTS_DIR: "$BACKEND_DIR/reports"

  # Define the test user
  TEST_USER: "GAPAdmin"
  TEST_USER_PASSWORD: "1"
  
  # Define docker variables
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

  # Define the feature branch pattern
  FEATURE_BRANCH_PATTERN: "^feature/issue-\\d+/.+"

lint-backend:
  stage: lint
  allow_failure: true
  image: python:3.12
  before_script:
    - pip install flake8 mypy
  script:
    - cd "$BACKEND_DIR"
    - flake8 ./gap > "$REPORTS_DIR/django-lint-flake8-report.txt" --exit-zero || echo "Flake8 issues found." 
    # Formatting issues, unused imports, indentation errors
    - mypy ./gap > "$REPORTS_DIR/django-lint-mypy-report.txt" || echo "Mypy issues found, but continuing the pipeline."
    # Type mismatches, incorrect return types

# TODO: Add frontend linting
# lint-frontend:
#   stage: lint
#   image: node:22.11
#   script:
#     - cd "$FRONTEND_DIR"
#     - npm install -g eslint
#     - npx eslint . > "$REPORTS_DIR/react-lint-report.txt" || echo "Eslint issues found."

build-backend:
  stage: build
  image: python:3.12
  before_script:
    - cd $BACKEND_DIR
    - pip install -r requirements.txt
  script:
    - python manage.py migrate
    - python manage.py collectstatic --noinput
  artifacts:
    paths:
      - $BACKEND_DIR/staticfiles/

build-frontend:
  stage: build
  image: node:22.11
  before_script:
    - cd "$FRONTEND_DIR"
    - npm install
  script:
    - npm run build || echo "Build issues found"
  artifacts:
    paths:
      - $FRONTEND_DIR/build/

test-backend:
  stage: test
  image: python:3.12
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: TEST_USER
    POSTGRES_PASSWORD: TEST_USER_PASSWORD
  before_script:
    - cd $BACKEND_DIR
    - pip install -r requirements.txt
    - python manage.py makemigrations --merge
    - python manage.py migrate
  script:
    - coverage run --source='.' manage.py test
    - coverage report -m > "$REPORTS_DIR/django-test-coverage-report.txt"
  #rules:
  #  - if: $CI_COMMIT_BRANCH =~ $FEATURE_BRANCH_PATTERN  # Only run on feature branches

test-frontend:
  stage: test
  image: node:22.11
  before_script:
    - cd $FRONTEND_DIR
    - npm install
  script:
    - npm test -- --watchAll=false
  #rules:
  #  - if: $CI_COMMIT_BRANCH =~ $FEATURE_BRANCH_PATTERN  # Only run on feature branches

# # Build the Docker image
# build_image:
#   stage: docker
#   image: docker:latest
#   services:
#     - name: docker:dind
#       alias: docker
#       command: ["--tls=false"]
#   variables:
#     DOCKER_HOST: tcp://docker:2375/
#     DOCKER_TLS_CERTDIR: ""
#   script:
#     - docker build -t $IMAGE_TAG .
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#     - docker tag $IMAGE_TAG $CI_REGISTRY_IMAGE:latest

# # Push the Docker image to GitLab Container Registry
# push_image:
#   stage: docker
#   image: docker:latest
#   services:
#     - docker:dind
#   script:
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#     - docker push $IMAGE_TAG
#     - docker push $CI_REGISTRY_IMAGE:latest

#security:
#  stage: security
#  script:
#    - pip install bandit safety
#    - bandit -r .
#    - safety check

deploy:
  stage: deploy
  script:
    - echo "Deploy script here" # TODO: Add deployment script