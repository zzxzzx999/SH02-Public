stages:
  - lint
  - build
  - test
  - deploy

variables:
  # Define the project directory
  BACKEND_DIR: "$CI_PROJECT_DIR/gap_project"
  FRONTEND_DIR: "$BACKEND_DIR/frontend"
  REPORTS_DIR: "$BACKEND_DIR/reports"

  # Define the test user
  TEST_USER: "GAPAdmin"
  TEST_USER_PASSWORD: "1"
  
  # Define docker variables
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

  # Define the feature branch pattern
  FEATURE_BRANCH_PATTERN: "^feature/issue-\\d+/.+"

image: node:22.11

cache:
  key: shared-cache
  paths:
    - $FRONTEND_DIR/node_modules/
  policy: pull-push

lint-backend:
  stage: lint
  allow_failure: true
  image: python:3.12
  before_script:
    - pip install flake8 mypy
  script:
    - cd "$BACKEND_DIR"
    - flake8 ./gap > "$REPORTS_DIR/django-lint-flake8-report.txt" --exit-zero || echo "Flake8 issues found." 
    # Formatting issues, unused imports, indentation errors

build-backend:
  stage: build
  image: python:3.12
  before_script:
    - cd $BACKEND_DIR
    - pip install -r requirements.txt
  script:
    - python manage.py makemigrations
    - python manage.py migrate
    - python manage.py collectstatic --noinput
  artifacts:
    paths:
      - $BACKEND_DIR/staticfiles/

build-frontend:
  stage: build
  image: node:22.11
  before_script:
    - cd "$FRONTEND_DIR"
    - npm install
  script:
    - npm run build || echo "Build issues found"
    - ls -la $FRONTEND_DIR/node_modules/
    - ls -la $FRONTEND_DIR/build/
  artifacts:
    paths:
      - $FRONTEND_DIR/build/
      - $FRONTEND_DIR/node_modules/

test-backend:
  stage: test
  image: python:3.12
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: TEST_USER
    POSTGRES_PASSWORD: TEST_USER_PASSWORD
  before_script:
    - cd $BACKEND_DIR
    - pip install -r requirements.txt
    - python manage.py makemigrations --merge
    - python manage.py migrate
  script:
    - coverage run --source='.' manage.py test
    - coverage report -m > "$REPORTS_DIR/django-test-coverage-report.txt"

test-frontend:
  stage: test
  image: node:22.11
  before_script:
    - cd $FRONTEND_DIR
    - npm install
  script:
    - npm run test:coverage .

pages:
  stage: deploy
  script:
    - rm -rf public
    - cp $FRONTEND_DIR/build/index.html $FRONTEND_DIR/build/404.html
    - mv $FRONTEND_DIR/build/ public  # GitLab Pages requires output in "public" directory
    - ls -la $FRONTEND_DIR/node_modules/
  artifacts:
    paths:
      - public
  only:
    - main  # Deploy only when pushing to the main branch
  pages: true
