stages:
  - lint
  - test
  - security
  - deploy

variables:
  FRONTEND_DIR: "$CI_PROJECT_DIR/gap_project/frontend"
  BACKEND_DIR: "$CI_PROJECT_DIR/gap_project/gap"
  REACT_LINT_REPORT: "$CI_PROJECT_DIR/gap_project/reports/react-lint-report.txt"
  DJANGO_LINT_FLAKE8_REPORT: "$CI_PROJECT_DIR/gap_project/reports/django-lint-flake8-report.txt"
  DJANGO_LINT_MYPY_REPORT: "$CI_PROJECT_DIR/gap_project/reports/django-lint-mypy-report.txt"

lint-backend:
  stage: lint
  allow_failure: true
  image: python:3.12
  before_script:
    - pip install flake8 mypy
  script:
    - cd "$BACKEND_DIR"
    - flake8 . > "$DJANGO_LINT_FLAKE8_REPORT" --exit-zero || echo "Flake8 issues found." 
    # Formatting issues, unused imports, indentation errors
    - mypy . > "$DJANGO_LINT_MYPY_REPORT" --exit-zero || echo "Mypy issues found." 
    # Type mismatches, incorrect return types

lint-frontend:
  stage: lint
  image: node:22.11
  script:
    - cd "$FRONTEND_DIR"
    - npm install -g eslint
    - npx eslint . > "$REACT_LINT_REPORT" || echo "Eslint issues found."
    # --max-warnings=0 # (This makes the pipeline fail if styling errors detected)

test:
  stage: test
  image: python:3.12
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: GAPAdmin
    POSTGRES_PASSWORD: 1
  before_script:
    - apt-get update
    - apt-get install -y python3 python3-pip
    - pip install django djangorestframework django-cors-headers coverage
    - cd gap_project/
    - python manage.py makemigrations --merge
    - python manage.py migrate
  script:
    - python manage.py test
    - coverage run --source='.' manage.py test
    - coverage report

#security:
#  stage: security
#  script:
#    - pip install bandit safety
#    - bandit -r .
#    - safety check

deploy:
  stage: deploy
  script:
    - echo "Deploy script here"